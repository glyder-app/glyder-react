// Initialize and add the map
var paradise = new google.maps.LatLng(39.7596, -121.6219)

var mapOptions = {
  center: paradise,
  zoom: 12,
  mapTypeId: 'terrain'
}

var map = new google.maps.Map(document.getElementById("map"), mapOptions)

// parameters of the hexagon grid
var size = 0.006
var width = size * 60
var length = size * 120
var start = [39.7596-width/2, -121.6219-length/2]
var verd = 3 * size
var hord = size / Math.sqrt(2)
var as = size/2
var bs = size/Math.sqrt(2)
var counter = 0
var col = 78

// adding hexagons as maps.Data objects in the map to construct the hex grid
// hexagon math, abstract away soon
for (var i =0; i < Math.floor(width/hord); i++) {
  var x = start[0] + i * hord
  if (i % 2 == 0)
    start[1] += verd/2
  else
    start[1] -= verd/2
  
  for (var j =0; j < Math.floor(length/verd); j++) {
    var y = start[1] + j * verd
    counter += 1

    var hexCoords = [
            {lat: x, lng: y - size},
            {lat: x + bs, lng: y - as},
            {lat: x + bs, lng: y + as},
            {lat: x, lng: y + size},
            {lat: x - bs, lng: y + as},
            {lat: x - bs, lng: y - as},
        ]

    map.data.add({
          geometry: new google.maps.Data.Polygon([hexCoords]),
          id: counter,
          properties:{
            center: [roundTo(x, 3), roundTo(y, 3)],
            fireConfirmed: false,
            probability: 0.0
          }
        })
  }
}

// style of the hexagons
// shades of red corresponding to probability of fire
map.data.setStyle(function(feature) {
      var sc = '#AAAAAA'
      var sw = 0.2
      if (feature.getProperty('fireConfirmed')) {
        sc = '#FF0000'
        sw = 1.5
      }
      var p = feature.getProperty('probability')
      var red = '#FF0000'
      return /** @type {!google.maps.Data.StyleOptions} */({
        fillColor: red,
        fillOpacity: p*0.5,
        strokeColor: sc,
        strokeOpacity: 0.9,
        strokeWeight: sw
      })
})

// When the user clicks, a fire is confirmed if it wasn't before, and vice versa.
map.data.addListener('click', function(event) {
  if (event.feature.getProperty('fireConfirmed')) {
    event.feature.setProperty('fireConfirmed', false)
    event.feature.setProperty('probability', 0.0)
  } else{
    event.feature.setProperty('fireConfirmed', true)
    event.feature.setProperty('probability', 1.0)
  }
})

// right click displays weather data
map.data.addListener('rightclick', function(event){
  showData(event)
})

// When the user hovers, tempt them to click by outlining the letters.
// Call revertStyle() to remove all overrides. This will use the style rules defined in the function passed to setStyle()
map.data.addListener('mouseover', function(event) {
  map.data.revertStyle()
  map.data.overrideStyle(event.feature, {strokeWeight: 2.5})
})

map.data.addListener('mouseout', function(event) {
  map.data.revertStyle()
})

// use maps.InfoWindow to display data
var infoWindow
infoWindow = new google.maps.InfoWindow

function showData(event) {
  var dataCategory = ['temperature']
  var f = event.feature
  let contentString = ''
  var style = '<style> pre {line-height: 1.2; color: #4f4f4f} h2 {line-height: 0.2}></style>'
  // let contentString = ('Area ID ' + f.getId() + '<br>').bold()
  contentString += style
  contentString += '<h2>Chico ' + ('(' + f.getProperty('center') + ')').small() + '<br></h2>'
  contentString += '<pre>'
  // contentString += '
  var s, c, t
  if (f.getProperty('fireConfirmed')) {
    s = 'On-going Fire'
    c = '#DF0025'
    t = 512.8
  }
  else if (f.getProperty('probability') > 0.1){
    s = 'Warning(' + roundTo(f.getProperty('probability') * 100, 2) + '%)'
    c = '#FF8300'
    t = 237.3
  }
  else {
    s = 'Safe'
    c = '#00CC66'
    t = 72.4
  }
  // contentString += f.getId()
  // contentString += 'Data<br>'
  // contentString += 'Wind Direction (radian) '.bold() + 1.56 + '<br>'
// cheating
	var r = Math.pow((Math.random() + 0.5), 0.2)
  
  contentString += 'Statu       '+ s.fontcolor(c).bold() + '<br>'
  contentString += 'Wind        ' + (roundTo(25 * r, 2) + ' mph, ' + roundTo(0.56 * r, 2) + ' SW<br>').bold()
  contentString += 'Fuel Type   ' + 'O-1b[Standing Grass]<br>'.bold()
  contentString += 'Temperature ' + (roundTo(t * r, 2) + '\xB0F<br>').bold()
  contentString += '</pre>'
  // contentString += ': '

// replaced by partially hardcoded infowindow for the demo

  // f.forEachProperty(function(v, k){
  //   contentString += k + ': ' + v + '<br>'
  // })
  // contentString += '---------------- <br>'
  // var xy = f.getProperty('center')
  // var url = 'https://api.openweathermap.org/data/2.5/weather?lat=' + xy[0] + '&lon=' + xy[1] + '&APPID=4a2dab7ba1df8c6201c34503fa4f315b'
  // // fetch data form openweathermap
  // fetch(url)
  // .then((resp) => resp.json())
  // .then((myJson) => {
  //   contentString += JSON.stringify(myJson.main)
  //   // Replace the info window's content and position.
  //   infoWindow.setContent(contentString)
  //   infoWindow.setPosition(event.latLng)
  //   infoWindow.open(map)
  // })


  infoWindow.setContent(contentString)
  infoWindow.setPosition(event.latLng)
  infoWindow.open(map)

  
}

// recalculate probability of fire every 2 seconds 
var intervalID = window.setInterval(CalculateProb, 2000);

function CalculateProb() {
  // more hexagon math, abstract away later
  var directions = [-col/2 - 1, -col/2 + 1, col/2 + 1, -col/2, col/2, -col, col]
  for (var n = col+1; n < counter - col; n++) {
    var fcurr = map.data.getFeatureById(n)
    var pcurr = fcurr.getProperty('probability')
    var ptotal = 0
    for(var k = 0; k < 7; k++){
      var fn = map.data.getFeatureById(n + directions[k])
      
      var pn = fn.getProperty('probability')
      ptotal += pn
    }
    var newp = Math.min(pcurr + 0.02 * Math.pow(ptotal, 0.8), 0.8)
    if (pcurr != 1.0){
      fcurr.setProperty('probability', newp)
    }
  }
}






// helper functions, move to modules later
// round number n to k decimal places
function roundTo(n, k){
  var mul = 1
  for(var i = 0; i < k; i++)
    mul *= 10
  return Math.round(n * mul) / mul
}



// discarded code, left as reference to google maps api samples, remove soon.

// var heatmap = new google.maps.visualization.HeatmapLayer({
//   data: heatmapData
// })
// heatmap.setMap(map)

// var map
// function initMap() {
//   map = new google.maps.Map(document.getElementById('map'), {
//     zoom: 8,
//     center: {lat: 36.778, lng: -119.42},
//     mapTypeId: 'terrain'
//   })

//   // Create a <script> tag and set the USGS URL as the source.
//   var script = document.createElement('script')

//   // This example uses a local copy of the GeoJSON stored at
//   // http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojsonp
//   script.src = 'https://developers.google.com/maps/documentation/javascript/examples/json/earthquake_GeoJSONP.js'
//   document.getElementsByTagName('head')[0].appendChild(script)

//   map.data.setStyle(function(feature) {
//     var magnitude = feature.getProperty('mag')
//     return {
//       icon: getCircle(magnitude)
//     }
//   })
// }

// function getCircle(magnitude) {
//   return {
//     path: google.maps.SymbolPath.CIRCLE,
//     fillColor: 'red',
//     fillOpacity: .4,
//     scale: Math.pow(2, magnitude),
//     strokeColor: 'white',
//     strokeWeight: .8
//   }
// }

// function eqfeed_callback(results) {
//   map.data.addGeoJson(results)
// }

// showdata()
// Since this polygon has only one path, we can call getPath() to return the
  // MVCArray of LatLngs.
  // var vertices = this.getPath()

  // var contentString = '<b>Bermuda Triangle polygon</b><br>' +
  //     'Clicked location: <br>' + event.latLng.lat() + ',' + event.latLng.lng() +
  //     '<br>'

  // // Iterate over the vertices.
  // for (var i =0 i < vertices.getLength() i++) {
  //   var xy = vertices.getAt(i)
  //   contentString += '<br>' + 'Coordinate ' + i + ':<br>' + xy.lat() + ',' +
  //       xy.lng()
  // }